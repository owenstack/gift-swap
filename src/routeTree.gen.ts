/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TosRouteImport } from './routes/tos'
import { Route as AppRouteImport } from './routes/app'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppIndexRouteImport } from './routes/app.index'
import { Route as AppSettingsRouteImport } from './routes/app.settings'
import { Route as AppNewRouteImport } from './routes/app.new'
import { Route as AppItemIdRouteImport } from './routes/app.$itemId'
import { Route as AuthSignupRouteImport } from './routes/_auth.signup'
import { Route as AuthLoginRouteImport } from './routes/_auth.login'
import { Route as AuthFailedRouteImport } from './routes/_auth.failed'
import { Route as AppItemIdEditRouteImport } from './routes/app.$itemId.edit'

const TosRoute = TosRouteImport.update({
  id: '/tos',
  path: '/tos',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AppSettingsRoute = AppSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRoute,
} as any)
const AppNewRoute = AppNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AppRoute,
} as any)
const AppItemIdRoute = AppItemIdRouteImport.update({
  id: '/$itemId',
  path: '/$itemId',
  getParentRoute: () => AppRoute,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)
const AuthFailedRoute = AuthFailedRouteImport.update({
  id: '/failed',
  path: '/failed',
  getParentRoute: () => AuthRoute,
} as any)
const AppItemIdEditRoute = AppItemIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => AppItemIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/tos': typeof TosRoute
  '/failed': typeof AuthFailedRoute
  '/login': typeof AuthLoginRoute
  '/signup': typeof AuthSignupRoute
  '/app/$itemId': typeof AppItemIdRouteWithChildren
  '/app/new': typeof AppNewRoute
  '/app/settings': typeof AppSettingsRoute
  '/app/': typeof AppIndexRoute
  '/app/$itemId/edit': typeof AppItemIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/tos': typeof TosRoute
  '/failed': typeof AuthFailedRoute
  '/login': typeof AuthLoginRoute
  '/signup': typeof AuthSignupRoute
  '/app/$itemId': typeof AppItemIdRouteWithChildren
  '/app/new': typeof AppNewRoute
  '/app/settings': typeof AppSettingsRoute
  '/app': typeof AppIndexRoute
  '/app/$itemId/edit': typeof AppItemIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/app': typeof AppRouteWithChildren
  '/tos': typeof TosRoute
  '/_auth/failed': typeof AuthFailedRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/signup': typeof AuthSignupRoute
  '/app/$itemId': typeof AppItemIdRouteWithChildren
  '/app/new': typeof AppNewRoute
  '/app/settings': typeof AppSettingsRoute
  '/app/': typeof AppIndexRoute
  '/app/$itemId/edit': typeof AppItemIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/tos'
    | '/failed'
    | '/login'
    | '/signup'
    | '/app/$itemId'
    | '/app/new'
    | '/app/settings'
    | '/app/'
    | '/app/$itemId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/tos'
    | '/failed'
    | '/login'
    | '/signup'
    | '/app/$itemId'
    | '/app/new'
    | '/app/settings'
    | '/app'
    | '/app/$itemId/edit'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/app'
    | '/tos'
    | '/_auth/failed'
    | '/_auth/login'
    | '/_auth/signup'
    | '/app/$itemId'
    | '/app/new'
    | '/app/settings'
    | '/app/'
    | '/app/$itemId/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  AppRoute: typeof AppRouteWithChildren
  TosRoute: typeof TosRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tos': {
      id: '/tos'
      path: '/tos'
      fullPath: '/tos'
      preLoaderRoute: typeof TosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/settings': {
      id: '/app/settings'
      path: '/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof AppSettingsRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/new': {
      id: '/app/new'
      path: '/new'
      fullPath: '/app/new'
      preLoaderRoute: typeof AppNewRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/$itemId': {
      id: '/app/$itemId'
      path: '/$itemId'
      fullPath: '/app/$itemId'
      preLoaderRoute: typeof AppItemIdRouteImport
      parentRoute: typeof AppRoute
    }
    '/_auth/signup': {
      id: '/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/failed': {
      id: '/_auth/failed'
      path: '/failed'
      fullPath: '/failed'
      preLoaderRoute: typeof AuthFailedRouteImport
      parentRoute: typeof AuthRoute
    }
    '/app/$itemId/edit': {
      id: '/app/$itemId/edit'
      path: '/edit'
      fullPath: '/app/$itemId/edit'
      preLoaderRoute: typeof AppItemIdEditRouteImport
      parentRoute: typeof AppItemIdRoute
    }
  }
}

interface AuthRouteChildren {
  AuthFailedRoute: typeof AuthFailedRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthFailedRoute: AuthFailedRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupRoute: AuthSignupRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface AppItemIdRouteChildren {
  AppItemIdEditRoute: typeof AppItemIdEditRoute
}

const AppItemIdRouteChildren: AppItemIdRouteChildren = {
  AppItemIdEditRoute: AppItemIdEditRoute,
}

const AppItemIdRouteWithChildren = AppItemIdRoute._addFileChildren(
  AppItemIdRouteChildren,
)

interface AppRouteChildren {
  AppItemIdRoute: typeof AppItemIdRouteWithChildren
  AppNewRoute: typeof AppNewRoute
  AppSettingsRoute: typeof AppSettingsRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppItemIdRoute: AppItemIdRouteWithChildren,
  AppNewRoute: AppNewRoute,
  AppSettingsRoute: AppSettingsRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  AppRoute: AppRouteWithChildren,
  TosRoute: TosRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
